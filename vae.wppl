var zDim = 2;
var hDecodeDim = 500;
var hEncodeDim = 500;
var xDim = 784;

// Requires the mnist data set to be downloaded and unpacked. See
// data/mnist.js.

// Requires https://github.com/null-a/webppl-fs

// Run with:
// webppl --require webppl-fs vae.wppl

var images = map(Vector, JSON.parse(fs.read('data/mnist_images.json')));

// Recognition network.
// Maps from an input image to the parameters of the guide
// distribution.
var encode = function(x, W, b) {
  var h = T.tanh(T.add(T.dot(W[0], x), b[0]));
  var mu = T.add(T.dot(W[1], h), b[1]);
  var sigma = T.exp(T.add(T.dot(W[2], h), b[2]));
  return {mu: mu, sigma: sigma};
};

// Generative network.
// Maps from the latent space to pixels.
var decode = function(z, W, b) {
  var h = T.tanh(T.add(T.dot(W[0], z), b[0]));
  return T.sigmoid(T.add(T.dot(W[1], h), b[1]));
};

var nnparam = function(a, b) {
  return tensorParam([a, b], 0, 0.1);
};

var model = function() {

  // Define parameters.

  // Variational.
  var W0 = nnparam(hEncodeDim, xDim);
  var W1 = nnparam(zDim, hEncodeDim);
  var W2 = nnparam(zDim, hEncodeDim);
  var b0 = nnparam(hEncodeDim, 1);
  var b1 = nnparam(zDim, 1);
  var b2 = nnparam(zDim, 1);

  // Generative.
  var W3 = sample(TensorGaussian({mu: 0, sigma: 1, dims: [hDecodeDim, zDim]}), {
    guide: Delta({v: nnparam(hDecodeDim, zDim)})
  });
  var W4 = sample(TensorGaussian({mu: 0, sigma: 1, dims: [xDim, hDecodeDim]}), {
    guide: Delta({v: nnparam(xDim, hDecodeDim)})
  });
  var b3 = sample(TensorGaussian({mu: 0, sigma: 1, dims: [hDecodeDim, 1]}), {
    guide: Delta({v: nnparam(hDecodeDim, 1)})
  });
  var b4 = sample(TensorGaussian({mu: 0, sigma: 1, dims: [xDim, 1]}), {
    guide: Delta({v: nnparam(xDim, 1)})
  });

  mapData({data: images, batchSize: 100}, function(image) {

    var z = sample(TensorGaussian({mu: 0, sigma: 1, dims: [zDim, 1]}), {
      guide: DiagCovGaussian(encode(image, [W0, W1, W2], [b0, b1, b2]))
    });

    var probs = decode(z, [W3, W4], [b3, b4]);

    observe(MultivariateBernoulli({ps: probs}), image);

  });

  return; // something
};

var params = Optimize(model, {
  steps: 500,
  estimator: {ELBO: {samples: 1}},
  optMethod: {adam: {stepSize: 0.001}}
});

'done';
